#encoding=utf-8
''' 2022-02-16: Initial release.
    '''

# ----------------------------------------------------------VARIABLES----------------------------------------------------------#
bscserverip = '172.16.121.41'
dbuser = 'sitedb'
dbpassword = 'BSCAltice.123'
mccmnc = "18370f01"
# ----------------------------------------------------------FUNCTIONS----------------------------------------------------------#
def nrCellParaDbUpdate(gNodebId, cellId, pci, prach, arfcn, band, txMode, tac, gNbName, cellName, cellRad, eCGI, siteId, refSignal, cellMaxPwr, cellActState, cellAdmState)
	# Data counter to avoid composing queries too large
	dataCounter = 0
    query = "REPLACE INTO ltecellpara (`enbid`, `cellid`, `pci`, `prach`, `arfcn`, `band`, `txmode`, `tac`, `gNbName`, `cellname`, `cellrad`, `ecgi`, `siteid`, `pdsch`, `cellmaxpower`, `activestate`, `adminstate`) VALUES "
    Print(StrfTime("%Y%m%d:%H%M%S:") + 'Connected! Populating gNodeB ' + gNodebId + ' data.')
    for i in range(len(cellId))
        eCGIProv = eCGI
        # Completing eCGI. If less than 16 dec, then hex will be 1 digit only.
        if int(cellId[i]) < 16
            eCGIProv += "0"
        end
        eCGIProv += str(hex(int(cellId[i])))[2:]
        query += "(" + gNodebId + ", " + cellId[i] + ", " + pci[i] + ", " + prach[i] + ", " + arfcn[i] + ", " + band[i] + ", '" + txMode[i] + "', " + tac + ", '" + gNbName + "', '" + cellName[i] + "', " + cellRad[i] + ", '" + eCGIProv + "', " + str(siteId) + ", " + refSignal[i] + ", " + cellMaxPwr[i] + ", '" + cellActState[i] + "', '" + cellAdmState[i] + "')"
		# Increase counter with each loop
        dataCounter += 1
        # Check when you get to the last line and cross the dataCounter threshold
        if i < len(cellId) - 1 and dataCounter < 16
            query += ", "
        else
            query += ";"
			# Print query
			Print(StrfTime("%Y%m%d:%H%M%S:") + query)
			# Execute query
			ExecuteCmd(ssh, query)
			# Reset query var
			query = "REPLACE INTO ltecellpara (`enbid`, `cellid`, `pci`, `prach`, `arfcn`, `band`, `txmode`, `tac`, `gNbName`, `cellname`, `cellrad`, `ecgi`, `siteid`, `pdsch`, `cellmaxpower`, `activestate`, `adminstate`) VALUES "
			# Reset dataCounter
			dataCounter = 0
        end
    end
end

# -----------------------------------------------------------MAINCODE----------------------------------------------------------#
# Get NE list by type
NEList = GetNELstByType('BTS5900')
NEList.sort()
# Open the connection
ssh = OpenSSH(bscserverip, dbuser, dbpassword)
if IsConnected(ssh) == True
    Print(StrfTime("%Y%m%d:%H%M%S:") + 'ssh connection success\n')
    # Connect to the DB
    ExecuteCmd(ssh, 'mysql -u ' + dbuser + ' -p' + dbpassword + ' alticedr_sitedb')
    # Loop through the NE list
    for ne in NEList
        # Check if NE is online before connecting
        if GetNEStatus(ne) == 1
            Print(StrfTime("%Y%m%d:%H%M%S:") + ne + ' is online')
            # Connect to the NE on loop
            ConnectNE(ne)
            Print('Connected to ' + ne)
            Print(StrfTime("%Y%m%d:%H%M%S:") + 'Connected to ' + ne)
            @LST GNODEBFUNCTION:;
            lstGnodebFunctionParsedReport = ParseMMLRpt(GetMMLReport(0))
            gnbIdReport = GetRecordNum(lstGnodebFunctionParsedReport, 0)
            gNodebId = GetAttrValueByName(lstGnodebFunctionParsedReport, 0, 'gNodeB ID', 0)
			ClearMMLBuffer()
            # If gnbid != 0, then there's an gNodeB Function existing
            if gnbIdReport != 0
                ## Add eNB ID to eCGI. Must omit the first 2 chars (0x)
                #gnbIdHex = str(hex(int(gNodebId)))[2:]
                #while len(gnbIdHex) < 6
                #    gnbIdHex = "0" + gnbIdHex   
                #end
                # Get gNodeB name from the last MML Command
                gNbName = GetAttrValueByIdx(lstGnodebFunctionParsedReport, 0, 0, 0)
                ClearMMLBuffer()
                # Get TAC
                @LST GNBTRACKINGAREA:;
                lstGnbTrackingAreaParsedReport = ParseMMLRpt(GetMMLReport(0))
                tac = GetAttrValueByName(lstGnbTrackingAreaParsedReport, 0, 'Tracking Area Code', 0)
				ClearMMLBuffer()
                # Get NR CELL information
                @LST NRDUCELL:;
                # Must get all command output reports, in case there is more than 1 report.
                lstNrDuCellReportList = GetAllMMLReport()
                # Loop through all the reports (even if it's just one)
                for report in lstNrDuCellReportList
                    nrDuCellParsedReport = ParseMMLRpt(report)
                    cellId = GetColumnByName(nrDuCellParsedReport, 0, 'NR DU Cell ID')
                    cellName = GetColumnByName(nrDuCellParsedReport, 0, 'NR DU Cell Name')
                    pci = GetColumnByName(nrDuCellParsedReport, 0, 'Physical Cell ID')
                    prach = GetColumnByName(nrDuCellParsedReport, 0, 'Logical Root Sequence Index')
                    cellRad = GetColumnByName(nrDuCellParsedReport, 0, 'Cell Radius(m)')
					ulArfcn = GetColumnByName(nrDuCellParsedReport, 0, 'Uplink NARFCN')
                    dlArfcn = GetColumnByName(nrDuCellParsedReport, 0, 'Downlink NARFCN')
					ulBandwidth = GetColumnByName(nrDuCellParsedReport, 0, 'Uplink Bandwidth')
					dlBandwidth = GetColumnByName(nrDuCellParsedReport, 0, 'Downlink Bandwidth')
					duplexMode = GetColumnByName(nrDuCellParsedReport, 0, 'Duplex Mode')
					subCarrierSpacing = GetColumnByName(nrDuCellParsedReport, 0, 'Subcarrier Spacing(KHz)')
                    band = GetColumnByName(nrDuCellParsedReport, 0, 'Frequency Band')
                end
				ClearMMLBuffer()
				# Get NR Cell TxRx Mode
				@LST NRDUCELLTRP:;
				lstNrDuCellTrpReportList = GetAllMMLReport()
				for report in lstNrDuCellTrpReportList
					nrDuCellTrpParsedReport = ParseMMLRpt(report)
					txMode = GetColumnByName(nrDuCellTrpParsedReport, 0, 'Transmit and Receive Mode')
					txPower = GetColumnByName(nrDuCellTrpParsedReport, 0, 'Max Transmit Power(0.1dBm)')
				end
				ClearMMLBuffer()
				# Get NR Cell Availability Status
				@DSP NRCELL:;
				dspNrCellReportList = GetAllMMLReport()
				for report in dspNrCellReportList
					nrDuCellActStatusParsedReport = ParseMMLRpt(report)
					cellAdmState = GetColumnByName(nrDuCellActStatusParsedReport, 0, 'Cell Available State')
					cellActState = GetColumnByName(nrDuCellActStatusParsedReport, 0, 'NR Cell State')
				end
                #eCGI = mccmnc + gnbIdHex
                # Calculate siteid parameter
                # If gNodebId lenght is 5, then we're dealing with an UL BBU
                if len(gNodebId) == 5
                    siteId = int(gNodebId) - 80000
                elif len(gNodebId) == 6
                    # Check if it's a TDD BBU or an anchor gNodebId
                    if gNodebId[:2] == '10'
                        siteId = int(gNodebId) - 100000
                    else
                        siteId = int(gNodebId) - 110000
                    end
                else 
                    siteId = int(gNodebId)
                end
				ClearMMLBuffer()
				# Get Cell Power information
				@LST PDSCHCFG:;
				cellPdschReportList = GetAllMMLReport()
				for report in cellPdschReportList
					cellPdschParsedReport = ParseMMLRpt(report)
					refSignal = GetColumnByIndex(cellPdschParsedReport, 0, 1)
				end
				ClearMMLBuffer()
				# Get cell max transmit power
				@DSP CELL:;
				cellMaxPwrReportList = GetAllMMLReport()
				for report in cellMaxPwrReportList
					cellMaxPwrParsedReport = ParseMMLRpt(report)
					cellMaxPwr = GetColumnByIndex(cellMaxPwrParsedReport, 0, 13)
				end
				ClearMMLBuffer()
                # After getting all parameter from command output, we loop through the list and pass them to the function to populate the database.
                Print(StrfTime("%Y%m%d:%H%M%S:") + 'Calling provisioning function.')
                lteCellParaDbUpdate(gNodebId, cellId, pci, prach, arfcn, band, txMode, tac, gNbName, cellName, cellRad, eCGI, siteId, refSignal, cellMaxPwr, cellActState, cellAdmState)
            else
                Print(StrfTime("%Y%m%d:%H%M%S:") + ne + " has no gNodeB Function.")
                continue
            end
        else
            Print(StrfTime("%Y%m%d:%H%M%S:") + ne + " is offline.")
        end
    end
else
    Print(StrfTime("%Y%m%d:%H%M%S:") + 'ssh connection failed\n')
end
# Close the connection. 
CloseSSH(ssh)
Print(StrfTime("%Y%m%d:%H%M%S:") + 'ssh connection closed')
Print("Finished!")